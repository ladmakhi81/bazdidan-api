generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserModel {
  EstateCompanyAgent
  Client
  Admin
}

model User {
  id                       Int               @id @default(autoincrement())
  firstName                String            @db.VarChar(255)
  lastName                 String            @db.VarChar(255)
  phone                    String            @unique @db.VarChar(11)
  password                 String
  profileImage             String?
  bio                      String?
  model                    UserModel
  address                  String?
  isCompleteProfileAccount Boolean           @default(false)
  advertisingHomes         AdvertisingHome[] @relation("AdvertisingHomes")
  sendMessages             ChatMessage[]     @relation("SenderOfMessage")
  receivedMessages         ChatMessage[]     @relation("ReceiverOfMessage")
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  refreshTokens            RefreshToken[]    @relation("RefreshTokens")
  clientRequestCreated     ClientRequest[]   @relation("ClientRequestCreator")
  chatRoomsAsFirstUser     Chat[]            @relation("ChatRoomAsFirstUser")
  chatRoomAsSecondUser     Chat[]            @relation("ChatRoomAsSecondUser")
}

model RefreshToken {
  id               Int    @id @default(autoincrement())
  accessToken      String
  refreshTokenCode String
  userId           Int
  user             User   @relation(fields: [userId], references: [id], name: "RefreshTokens")
}

model Category {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  image            String
  advertisingHomes AdvertisingHome[] @relation("AdvertisingHomes")
}

enum AdvertisingHomeType {
  Mortage
  Buy
  Rent
}

model AdvertisingHome {
  id           Int                   @id @default(autoincrement())
  title        String
  description  String
  meta         Json
  address      String
  media        String[]              @default([])
  tags         String[]              @default([])
  creator      User                  @relation(fields: [creatorId], references: [id], name: "AdvertisingHomes")
  creatorId    Int
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  isPublished  Boolean
  category     Category              @relation(fields: [categoryId], references: [id], name: "AdvertisingHomes")
  categoryId   Int
  latitude     Float
  longtitude   Float
  price        Float
  roomCount    Int
  meterage     Int
  hasElevator  Boolean
  hasParking   Boolean
  hasStoreRoom Boolean
  hasBalcony   Boolean
  type         AdvertisingHomeType
  requests     ClientRequestResult[] @relation("AdvertisingHomeRequest")
  chats        Chat[]                @relation("AdvertisingRoomChat")
}

model Chat {
  id       Int    @id @default(autoincrement())
  roomName String @unique

  firstUserId Int
  firstUser   User @relation(fields: [firstUserId], references: [id], name: "ChatRoomAsFirstUser")

  secondUserId Int
  secondUser   User @relation(fields: [secondUserId], references: [id], name: "ChatRoomAsSecondUser")

  advertisingHomeId Int
  advertisingHome   AdvertisingHome @relation(fields: [advertisingHomeId], references: [id], name: "AdvertisingRoomChat")
  messages          ChatMessage[]   @relation("ChatMessages")
}

model ChatMessage {
  id                   Int          @id @default(autoincrement())
  sender               User         @relation(fields: [senderId], references: [id], name: "SenderOfMessage")
  senderId             Int
  receiver             User         @relation(fields: [receiverId], references: [id], name: "ReceiverOfMessage")
  receiverId           Int
  content              String
  createdAt            DateTime     @default(now())
  seen                 Boolean      @default(false)
  repliedMessage       ChatMessage? @relation("RepliedMessage")
  repliedMessageId     Int?         @unique
  parentRepliedMessage ChatMessage? @relation("RepliedMessage", fields: [repliedMessageId], references: [id])

  chatId Int
  chat   Chat @relation(fields: [chatId], references: [id], name: "ChatMessages")
}

model ClientRequest {
  id           Int                   @id @default(autoincrement())
  searchOption Json
  creatorId    Int
  creator      User                  @relation(fields: [creatorId], references: [id], name: "ClientRequestCreator")
  result       ClientRequestResult[] @relation("SendedClientRequestResult")
  createdAt    DateTime              @default(now())
}

model ClientRequestResult {
  requestId Int
  request   ClientRequest @relation(fields: [requestId], references: [id], name: "SendedClientRequestResult")

  advertisingHomeId Int
  advertisingHome   AdvertisingHome @relation(fields: [advertisingHomeId], references: [id], name: "AdvertisingHomeRequest")

  @@id([requestId, advertisingHomeId])
}
